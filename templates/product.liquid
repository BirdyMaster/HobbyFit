<script src="https://cdn.jsdelivr.net/npm/url-parse@1.5.10/dist/url-parse.min.js"></script>

<!-- set default colors -->
{% assign color_bg = product.metafields.custom.color_bg %}
{% assign color_raw = product.metafields.custom.color_raw %}

<!-- change colors, if product has variants -->
{% assign optionName = 'Color' %}
{% assign optionExists = false %}

{% for option in product.options %}
  {% if option == optionName %}
    {% assign optionExists = true %}
    {% break %}
  {% endif %}
{% endfor %}

{% if optionExists %}
  {% assign colorOption = product.options_with_values | where: 'name', optionName | first %}
  {% assign firstValue = colorOption.values | first %}
  {% assign color_raw = firstValue | split: ' ' | slice: 1 %}
  {% assign color_bg = firstValue | split: ' ' | last %}
  <p>option exists</p>
{% else %}
  <p>option DOESNT exists</p>
{% endif %}

<p>Bg: {{ color_bg }}</p>
<p>Raw: {{ color_raw }}</p>

<!-- only needed for slider functionality => replace in the future -->
<p class="invisible" id="color_bg">{{ color_bg }}</p>
<p class="invisible" id="color_raw">{{ color_raw }}</p>
<!----------------------------------------------------------------------------------->


<section class="section_productPage">
  <div class="container container_productPage">
    <div class="sticky_left">
      <div class="sticky_div">
        <div class="wrap_sliderTitle" data-effect="zoom">
          <div class="container_productPage">
            <h4 class="title_Product">{{ product.metafields.custom.name_short }}</h4>
            <div class="priceWrap_productPage">
              <p
                class="price_product_filterPage"
                data-isSale="{{ product.metafields.custom.sale}}"
                style="margin-right: 6px">{{ product.selected_or_first_available_variant.price | money }}</p>
              <p class="price_product_filterPage compare">{{ product.selected_or_first_available_variant.compare_at_price | money }}</p>
            </div>
            <p class="p_stockLeft">Liko dar {{ product.selected_or_first_available_variant.inventory_quantity }}</p>
          </div>
        </div>
        <div class="swiper">
          <img
            src="{{ 'img_WAVE_filterPage.svg' | asset_url }}"
            alt=""
            class="img_WAVE_long"
            style="background-color: {{ product.metafields.custom.color_bg }}"
            data-swiper-parallax="-15%"
            data-recolor_bg>
          <div
            class="swiper-wrapper"
            data-effect="zoom"
            data-zoom_active="false"
            data-magnify="1"
            data-reset>
            {% for image in product.images %}
              <div class="swiper-slide" data-reset>
                <img
                  src="{{ image | img_url: '600x600' }}"
                  alt=" {{ image.alt }}"
                  class="imgSwiper"
                  draggable="false">
              </div>
            {% endfor %}

          </div>
        </div>
        <div class="sliderControls" data-effect="zoom">
          <div class="container_productPage" style="flex-wrap: nowrap;">
            <div class="swiper-pagination" data-effect="zoom">
              <div class="swiper-pagination-bullet swiper-pagination-bullet-active"></div>
              <div class="swiper-pagination-bullet"></div>
              <div class="swiper-pagination-bullet"></div>
              <div class="swiper-pagination-bullet"></div>
            </div>
            <div class="slider_btns" data-effect="zoom">
              <div class="swiperBtn swiper-btn-prev" data-hover_grey>
                <div class="line_arrow"></div>
                <div class="line_arrow reverse"></div>
              </div>
              <div class="swiperBtn reverse swiper-btn-next" data-hover_grey>
                <div class="line_arrow"></div>
                <div class="line_arrow reverse"></div>
              </div>
              <div
                class="btn_Zoom"
                data-zoom="2"
                data-hover_grey></div>
            </div>
            <div class="controls_Magnify" data-effect="zoom">
              <div
                class="btn_magnify active"
                data-zoom="2"
                data-btn_magnify>2x</div>
              <div
                class="btn_magnify"
                data-zoom="3"
                data-btn_magnify>3x</div>
              <div
                class="X_wrap zoom"
                data-zoom="1"
                data-hover_grey>
                <div class="line_X"></div>
                <div class="line_X reverse"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="normal_right">
      {% form 'product', product %}
        <input
          id="product_id"
          type="hidden"
          name="id"
          value="{{ product.selected_or_first_available_variant.id }}">

        {% if product.selected_or_first_available_variant.available %}
          {% if product.variants.size > 1 %}
            <div class="product_option">
              {% for option in product.options_with_values %}
                {% if option.name == 'Size' %}
                  <label for="Size">Pasirinkite dydi:</label>
                {% elsif option.name == 'Color' %}
                  <label for="Color">Pasirinkite spalva:</label>
                {% endif %}

                <fieldset class="input_box">
                  {% for value in option.values %}
                    <div class="parent_optionRadio">
                      <input
                        {% if option.selected_value == value %}checked{% endif %}
                        type="radio"
                        name="{{ option.name }}"
                        value="{{ value }}"
                        id="{{ option.name | handleize }}={{ value | handleize }}"
                        class="optionRadio">

                      {% if option.name == 'Color' %}
                        <div class="circle_option" data-circle_color="{{ value }}"></div>
                        <label for="{{ option.name | handleize }}={{ value | handleize }}" style="display: none;">
                          {{ value }}
                        </label>
                      {% else %}
                        <label for="{{ option.name | handleize }}={{ value | handleize }}">
                          {{ value }}
                        </label>
                      {% endif %}
                    </div>
                  {% endfor %}
                </fieldset>
              {% endfor %}
            </div>
          {% endif %}

          <label for="Qantity" style="color: #0000009b;">Pasirinkite dydi:</label>
          <fieldset class="input_box">
            <div class="quantity_front">
              <div class="wrap_qntOptions">
                <div class="qnt_option active" data-value="1">1</div>
                <div class="qnt_option" data-value="2">2</div>
                <div class="qnt_option" data-value="3">3</div>
                <div class="qnt_option" data-value="4">4</div>
                <div class="qnt_option" data-value="5">5</div>
              </div>
              <div class="btn_giveQuantity">Ivesti kieki</div>
            </div>
            <div class="quantity_back">
              <input
                type="text"
                name="Quantity"
                class="qntInput"
                placeholder="Iveskite kieki..."
                value="1">
              <div class="btn_nearQtn cancel">Atsaukti</div>
              <div class="btn_nearQtn submit">Vykdyti</div>
            </div>
          </fieldset>

        {% endif %}

        <div class="btnWrap_mainDesc">
          {% if product.selected_or_first_available_variant.available %}
            <div
              class="btn_mainDesc bag"
              style="border: 1px solid {{ color_bg }}; font-weight: 400;"
              data-recolor_raw_border>
              <p style="color:{{ color_raw }}" data-recolor_raw_text>Į krepšelį</p>
              <img
                src="{{ 'icon_bag.png' | asset_url }}"
                alt=""
                class="bagIcon_btnCart">
            </div>
            <div
              class="btn_mainDesc buy"
              style="background-color: {{ color_raw }}; color: white;"
              data-recolor_raw>
              Užsisakyti<span class="price_insideBtn">$11.11</span>
            </div>
          {% else %}
            <div class="sign_outOfstock">Deja nebeturime šios prekės</div>
          {% endif %}
        </div>

      {% endform %}
      <div class="textWrap_productDesc">
        <p class="bullets"></p>
        <p class="description"></p>
      </div>
    </div>
  </div>
</section>

<script>


  window.addEventListener('DOMContentLoaded', () => {
    {% if product.options contains 'Color' %}
      console.log('color');
      const checked = document.querySelector('.optionRadio[name="Color"]:checked').value.split(" ");
      recolor(checked[1], checked[2]);
      set_circleColors();
    {% else %}recolor(color_raw, color_bg){% endif %}
  })

  let product = {{ product | json}}
  const radios = document.querySelectorAll('input[type="radio"].optionRadio')
  radios.forEach(radio => {
    radio.addEventListener('change', (e) => {

      {% if product.options contains 'Color' %}
        const checked_color = document.querySelector('.optionRadio[name="Color"]:checked').value.split(" ")
        recolor(checked_color[1], checked_color[2])

      {% else %}recolor(color_raw, color_bg){% endif %}


// find product that matches radio inputs
      let selected_radios = []
      document.querySelectorAll('input[type="radio"].optionRadio:checked').forEach(x => selected_radios.push(x.value))
      const matchedVariant = product.variants.find(variant => {
        for (let option of selected_radios) {
          if (!variant.options.includes(option)) {
            return false;
          }
        }
        return true;
      });

// execute fucntions
      edit_hiddenInput(matchedVariant)
      changeUrl(matchedVariant)
      edit_texts(matchedVariant)
    })
  })

  function recolor(raw, bg) {

    const elements_raw = document.querySelectorAll('[data-recolor_raw]');
    const elements_bg = document.querySelectorAll('[data-recolor_bg]');
    const text_raw = document.querySelectorAll('[data-recolor_raw_text]');
    const border_raw = document.querySelectorAll('[data-recolor_raw_border]');
    text_raw.forEach(el => el.style.color = raw);
    elements_raw.forEach(el => el.style.backgroundColor = raw);
    elements_bg.forEach(el => el.style.backgroundColor = bg);
    border_raw.forEach(el => el.style.borderColor = raw);

    const parents_optionRadio = document.querySelectorAll('.parent_optionRadio');
    parents_optionRadio.forEach(parent => {
      const inputElement = parent.querySelector('input[type="radio"]');

      if (inputElement && inputElement.checked) {
        parent.style.backgroundColor = bg;
        parent.querySelector('label').style.color = raw;

      } else {
        parent.removeAttribute('style');
        parent.querySelector('label').style.color = 'rgba(0, 0, 0, .85)';

      }


    });

  }
  function changeUrl(matchedVariant) {
    const url = new URLParse(window.location.href, true)
    url.query.variant = matchedVariant.id
    window.history.replaceState(null, null, url.toString())
  }
  function edit_hiddenInput(matchedVariant) {
    document.getElementById('product_id').value = matchedVariant.id
  }
  function edit_texts(matchedVariant) {
    document.querySelector('.price_product_filterPage').textContent = formatMoney(matchedVariant.price, "{{ shop.money_format }}")
  }
  function set_circleColors() {
    const circle_option = document.querySelectorAll('.circle_option')
    circle_option.forEach(x => {
      const color_raw = x.dataset.circle_color.split(" ")[1];
      x.style.backgroundColor = color_raw;
    })
  }

  const qnt_btns = document.querySelectorAll('.qnt_option')
  const btn_giveQuantity = document.querySelector('.btn_giveQuantity')
  const btn_cancelQuantity = document.querySelector('.btn_nearQtn.cancel')
  const qntInput = document.querySelector('.qntInput')

  btn_cancelQuantity.addEventListener('click', toggle_qntInput);
  btn_giveQuantity.addEventListener('click', () => {

    setTimeout(() => {
      qntInput.select()
    }, 151);
    console.log(qntInput)
    toggle_qntInput()

  });
  qnt_btns.forEach(x => x.addEventListener('click', (e) => {
    qnt_btns.forEach(y => y.classList.toggle('active', y == x))
    qntInput.value = e.currentTarget.textContent
  }))

  function toggle_qntInput() {
    const parent = document.querySelector('.input_box')
    const qnt_front = document.querySelector('.quantity_front')
    const qnt_back = document.querySelector('.quantity_back')
    parent.classList.toggle('show_back')

    if (! parent.classList.contains('show_back')) {
      qnt_front.style.opacity = "0%"
      qnt_back.style.display = 'flex'
      setTimeout(() => {
        qnt_back.style.opacity = "100%"
      }, 70)
      setTimeout(() => {
        qnt_front.style.display = 'none'
      }, 151)
    } else {

      qnt_back.style.opacity = "0%"
      qnt_front.style.display = 'flex'
      setTimeout(() => {
        qnt_front.style.opacity = "100%"
      }, 70)
      setTimeout(() => {
        qnt_back.style.display = 'none'
      }, 151)
    }

  }
</script>



{{ '_JS_productPage.js' | asset_url | script_tag }}
{{ '_JS_slider_productPage.js' | asset_url | script_tag }}