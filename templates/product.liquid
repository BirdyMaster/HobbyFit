<script src="https://cdn.jsdelivr.net/npm/url-parse@1.5.10/dist/url-parse.min.js"></script>

<!-- set default colors -->
{% assign color_bg = product.metafields.custom.color_bg %}
{% assign color_raw = product.metafields.custom.color_raw %}

<section class="section_productPage">
  <div class="container container_productPage">
    <div class="sticky_left">
      <div class="sticky_div">
        <div class="wrap_sliderTitle" data-effect="zoom">
          <div class="container_productPage mini">
            <h4 class="title_Product">{{ product.metafields.custom.name_short }} {{ product.metafields.custom.extra_text }}</h4>
            <div class="priceWrap_productPage">
              <p
                class="price_product_filterPage"
                data-isSale="{{ product.metafields.custom.sale}}"
                style="margin-right: 6px; font-size: 18px; font-weight: 600;">{{ product.selected_or_first_available_variant.price | money }}</p>
              <p class="price_product_filterPage compare" style="font-size: 18px; font-weight: 600;">{{ product.selected_or_first_available_variant.compare_at_price | money }}</p>
            </div>
            <p class="p_stockLeft">Liko dar {{ product.selected_or_first_available_variant.inventory_quantity }}</p>
          </div>
        </div>
        <div class="swiper">
          <img
            src="{{ 'img_WAVE_filterPage.svg' | asset_url }}"
            alt=""
            class="img_WAVE_long"
            style="background-color: {{ product.metafields.custom.color_bg }}"
            data-recolor_bg>
          <div
            class="swiper-wrapper"
            data-effect="zoom"
            data-zoom_active="false"
            data-magnify="1"
            data-reset>
            {% for image in product.images %}
              {% if image.alt contains color_bg %}
                <div class="swiper-slide" data-reset>
                  <img
                    src="{{ image | img_url: '600x600' }}"
                    alt=" {{ image.alt }}"
                    class="imgSwiper"
                    draggable="false">
                </div>
              {% endif %}
            {% endfor %}

          </div>
        </div>
        <div class="sliderControls" data-effect="zoom">
          <div class="container_productPage mini" style="flex-wrap: nowrap;">
            <div class="swiper-pagination" data-effect="zoom">
              <div class="swiper-pagination-bullet swiper-pagination-bullet-active"></div>
              <div class="swiper-pagination-bullet"></div>
              <div class="swiper-pagination-bullet"></div>
              <div class="swiper-pagination-bullet"></div>
            </div>
            <div class="slider_btns" data-effect="zoom">
              <div class="swiperBtn swiper-btn-prev" data-hover_grey>
                <div class="line_arrow"></div>
                <div class="line_arrow reverse"></div>
              </div>
              <div class="swiperBtn reverse swiper-btn-next" data-hover_grey>
                <div class="line_arrow"></div>
                <div class="line_arrow reverse"></div>
              </div>
              <div
                class="btn_Zoom"
                data-zoom="2"
                data-hover_grey></div>
            </div>
            <div class="controls_Magnify" data-effect="zoom">
              <div
                class="btn_magnify active"
                data-zoom="2"
                data-btn_magnify>2x</div>
              <div
                class="btn_magnify"
                data-zoom="3"
                data-btn_magnify>3x</div>
              <div
                class="X_wrap zoom"
                data-zoom="1"
                data-hover_grey>
                <div class="line_X"></div>
                <div class="line_X reverse"></div>
              </div>
            </div>
          </div>
        </div>

      </div>
    </div>

    <div class="normal_right">
      <div class="padding_subwrap">
        {% form 'product', product, class: 'form_productPage' %}
          <input
            id="product_id"
            type="hidden"
            name="id"
            value="{{ product.selected_or_first_available_variant.id }}">

          {% if product.selected_or_first_available_variant.available %}
            {% if product.variants.size > 1 %}
              <div class="product_option">
                {% for option in product.options_with_values %}
                  {% if option.name == 'Size' %}
                    <label for="Size">Pasirinkite dydi:</label>
                  {% elsif option.name == 'Color' %}
                    <label for="Color">Pasirinkite spalva:</label>
                  {% endif %}

                  <fieldset class="input_box">
                    {% for value in option.values %}
                      <div class="parent_optionRadio">
                        <input
                          {% if option.selected_value == value %}checked{% endif %}
                          type="radio"
                          name="{{ option.name }}"
                          value="{{ value }}"
                          id="{{ option.name | handleize }}={{ value | handleize }}"
                          class="optionRadio">

                        {% if option.name == 'Color' %}
                          <div class="circle_option" data-circle_color="{{ value }}"></div>
                          <label for="{{ option.name | handleize }}={{ value | handleize }}" style="display: none;">
                            {{ value }}
                          </label>
                        {% else %}
                          <label for="{{ option.name | handleize }}={{ value | handleize }}">
                            {{ value }}
                          </label>
                        {% endif %}
                      </div>
                    {% endfor %}
                  </fieldset>
                {% endfor %}
              </div>
            {% endif %}
            <label for="Qantity" style="color: #0000009b;">Pasirinkite kieki:</label>
            <fieldset class="input_box qnt">
              <div class="quantity_front">
                <div class="wrap_qntOptions desktop">
                  <div
                    class="qnt_option"
                    data-value="1"
                    data-recolor_bg
                    data-recolor_text_raw>1</div>
                  <div class="qnt_option d" data-value="2">2</div>
                  <div class="qnt_option d" data-value="3">3</div>
                  <div class="qnt_option d" data-value="4">4</div>
                  <div class="qnt_option d" data-value="5">5</div>
                </div>
                <div class="wrap_qntOptions mobile">
                  <div
                    class="qnt_option m"
                    data-value="1"
                    data-recolor_bg
                    data-recolor_text_raw>1</div>
                  <div class="qnt_option m" data-value="2">2</div>
                  <div class="qnt_option m" data-value="3">3</div>
                </div>
                <div class="btn_giveQuantity" data-recolor_text_raw>Ivesti kieki</div>
              </div>
              <div class="quantity_back">
                <input
                  type="number"
                  name="Quantity"
                  class="qntInput"
                  placeholder="Iveskite kieki..."
                  value="1"
                  onkeydown="checkKeyPress(event, this);">
                <div class="btn_nearQtn cancel" data-recolor_text_raw>Atsaukti</div>
                <div class="btn_nearQtn submit" data-recolor_raw>Vykdyti</div>
              </div>
            </fieldset>
          {% endif %}

          <div class="btnWrap_mainDesc">
            {% if product.selected_or_first_available_variant.available %}
              <div
                class="btn_mainDesc bag"
                style="border: 1px solid {{ color_bg }}; font-weight: 400;"
                data-recolor_border_raw>
                <p style="color:{{ color_raw }}" data-recolor_text_raw>Į krepšelį</p>
                <svg
                  class="theSVG"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 337.94 421.48">
                  <g id="Ebene_2" data-name="Ebene 2">
                    <g id="Ebene_1-2" data-name="Ebene 1"><path d="M337.69,385.58,301.08,86.79a10,10,0,0,0-9.88-8.74H46.73a10,10,0,0,0-9.88,8.74L.24,385.58A32,32,0,0,0,32,421.48H305.92A32,32,0,0,0,337.69,385.58ZM268.84,141.66c-.16,3.29-.48,6.53-.94,9.72-7.1,48.82-48.69,86.29-98.93,86.29S77.14,200.2,70,151.38c-.46-3.19-.78-6.43-.94-9.72v0a24.81,24.81,0,0,1,24.68-22.26q1.06,0,2.1.09A3.05,3.05,0,0,1,98.67,123a76.8,76.8,0,0,0,5.08,43.86C115,192.6,139.94,210.5,169,210.5s54-17.9,65.22-43.62a75.89,75.89,0,0,0,6.27-30.35,77,77,0,0,0-1.18-13.42,3.14,3.14,0,0,1,2.86-3.67c.66,0,1.34-.08,2-.08a24.81,24.81,0,0,1,24.68,22.26Z" /><path d="M250.13,64H225.46a2.64,2.64,0,0,1-2.33-1.43c-11.27-21.74-31.31-36.2-54.16-36.2s-42.89,14.46-54.16,36.2A2.62,2.62,0,0,1,112.48,64H87.8a1.46,1.46,0,0,1-1.38-2C100.28,25.52,132,0,169,0s68.68,25.52,82.54,62A1.46,1.46,0,0,1,250.13,64Z" /></g>
                  </g>
                </svg>
              </div>
              <div
                class="btn_mainDesc buy"
                style="background-color: {{ color_raw }}; color: white;"
                data-recolor_raw>
                Užsisakyti<span class="price_insideBtn">{{ product.selected_or_first_available_variant.price | money }}</span>
              </div>
            {% else %}
              <div class="sign_outOfstock">Deja nebeturime šios prekės</div>
            {% endif %}
          </div>

        {% endform %}

        <div class="separator"></div>
        <div class="wrap_productDescription">
          {{ product.metafields.custom.bullets | metafield_tag }}
          <p class="productDescription">
            {{ product.description }}</p>
        </div>
        <div class="separator"></div>
        <div class="wrap_otherInfo">
          <div class="otherInfo">
            <img
              src="{{ 'icon_shipping.png' | asset_url }}"
              alt=""
              class="icon_otherInfo">
            <p>Nemokamas siuntimas nuo 70 Euru</p>
          </div>
          <div class="otherInfo">
            <img
              src="{{ 'icon_return.png' | asset_url }}"
              alt=""
              class="icon_otherInfo">
            <p>30 Dienu grazinimas</p>
          </div>
          <div class="otherInfo">
            <img
              src="{{ 'icon_phone.png' | asset_url }}"
              alt=""
              class="icon_otherInfo">
            <p>Nuolatos palaikomas kontaktas</p>
          </div>
        </div>
        <div class="wrap_payments">
          <img
            src="{{ 'icon_payment_visa.svg' | asset_url }}"
            alt=""
            class="icon_payment">
          <img
            src="{{ 'icon_payment_paypal.svg' | asset_url }}"
            alt=""
            class="icon_payment">
          <img
            src="{{ 'icon_payment_citadele.svg' | asset_url }}"
            alt=""
            class="icon_payment">
          <img
            src="{{ 'icon_payment_mastercard.svg' | asset_url }}"
            alt=""
            class="icon_payment">
          <img
            src="{{ 'icon_payment_klarna.svg' | asset_url }}"
            alt=""
            class="icon_payment">
          <img
            src="{{ 'icon_payment_applepay.svg' | asset_url }}"
            alt=""
            class="icon_payment">
          <img
            src="{{ 'icon_payment_amazon.svg' | asset_url }}"
            alt=""
            class="icon_payment">
          <img
            src="{{ 'icon_payment_googlepay.svg' | asset_url }}"
            alt=""
            class="icon_payment">
        </div>
      </div>
    </div>
  </div>
</section>

<script>

  let swiper
  let product = {{ product | json}}
  function find_matchedVariant() {
    let selected_radios = []
    document.querySelectorAll('input[type="radio"].optionRadio:checked').forEach(x => selected_radios.push(x.value))
    const matchedVariant = product.variants.find(variant => {
      for (let option of selected_radios) {
        if (!variant.options.includes(option)) {
          return false;
        }
      }
      return true;
    });
    return matchedVariant
  }
  window.addEventListener('DOMContentLoaded', () => {
    {% if product.options contains 'Color' %}
      const checked = document.querySelector('.optionRadio[name="Color"]:checked').value.split(" ");
      recolor(checked[2], checked[1]);
      set_circleColors();
    {% else %}
      recolor('{{ color_raw }}', '{{ color_bg }}');{% endif %};

// -
    set_eventListeners();
    change_images()
    createSwiper();
    reset_Transitions();
    setTimeout(() => {
      set_Colors()
    }, 20)
  })

  const radios = document.querySelectorAll('input[type="radio"].optionRadio')
  radios.forEach(radio => {
    radio.addEventListener('change', (e) => {
      recolor_default()
      edit_hiddenInput(find_matchedVariant())
      changeUrl(find_matchedVariant(), get_colors()[0], get_colors()[1])
      edit_texts(find_matchedVariant())
      handle_btnPrice(find_matchedVariant())
    })
  })

  const color_radios = document.querySelectorAll('input[name="Color"]')
  color_radios.forEach(x => x.addEventListener('change', () => {
    document.querySelector('.swiper').style.opacity = "0%"
    document.querySelector('.sliderControls').style.opacity = "0%"
    document.querySelector('.wrap_sliderTitle').style.opacity = "0%"

    setTimeout(() => {
      change_images()
      replaceSwiper()
      set_Colors()
      document.querySelector('.sliderControls').style.opacity = "100%"
      document.querySelector('.wrap_sliderTitle').style.opacity = "100%"
    }, 201)

  }))

  function recolor_default() {
    {% if product.options contains 'Color' %}
      const checked_color = document.querySelector('.optionRadio[name="Color"]:checked').value.split(" ");
      recolor(checked_color[2], checked_color[1]);
    {% else %};
      recolor('{{ color_raw }}', '{{ color_bg }}');{% endif %};
  }
  function recolor(raw, bg) {
    const elements_raw = document.querySelectorAll('[data-recolor_raw]');
    const elements_bg = document.querySelectorAll('[data-recolor_bg]');
    const text_raw = document.querySelectorAll('[data-recolor_text_raw]');
    const border_raw = document.querySelectorAll('[data-recolor_border_raw]');
    text_raw.forEach(el => el.style.color = raw);
    elements_raw.forEach(el => el.style.backgroundColor = raw);
    elements_bg.forEach(el => el.style.backgroundColor = bg);
    border_raw.forEach(el => el.style.borderColor = raw);

    const parents_optionRadio = document.querySelectorAll('.parent_optionRadio');
    parents_optionRadio.forEach(parent => {
      const inputElement = parent.querySelector('input[type="radio"]');

      if (inputElement && inputElement.checked) {
        parent.style.backgroundColor = bg;
        parent.querySelector('label').style.color = raw;

      } else {
        parent.removeAttribute('style');
        parent.querySelector('label').style.color = 'rgba(0, 0, 0, .85)';

      }


    });
    changeSVGColor(raw)

  }
  function changeUrl(matchedVariant, color_bg, color_raw) {
    const url = new URLParse(window.location.href, true)
    url.query.variant = matchedVariant.id
    url.query.color_bg = color_bg
    url.query.color_raw = color_raw
    window.history.replaceState(null, null, url.toString())
  }
  function edit_hiddenInput(matchedVariant) {
    document.getElementById('product_id').value = matchedVariant.id
  }
  function edit_texts(matchedVariant) {
    document.querySelector('.price_product_filterPage').textContent = formatMoney(matchedVariant.price, "{{ shop.money_format }}")
    const qntLeft = document.querySelector('.p_stockLeft');
    {% assign variant = matchedVariant.id.variants | where: 'id', variantId | first %}
    console.log(matchedVariant)
  }
  function set_circleColors() {
    const circle_option = document.querySelectorAll('.circle_option')
    circle_option.forEach(x => {
      const color_raw = x.dataset.circle_color.split(" ")[2];
      x.style.backgroundColor = color_raw;
    })
  }
  function get_colors() {
    {% if product.options contains 'Color' %}
      const checked = document.querySelector('.optionRadio[name="Color"]:checked').value.split(" ");
      let bg = checked[1]
      let raw = checked[2]
    {% else %}
      let bg = '{{ color_bg }}'
      let raw = '{{ color_raw }}'

// -
    {% endif %};
    return [bg, raw]
  }

  const btn_giveQuantity = document.querySelector('.btn_giveQuantity')
  const btn_cancelQuantity = document.querySelector('.btn_nearQtn.cancel')
  const btn_submitQuantity = document.querySelector('.btn_nearQtn.submit')
  const qntInput = document.querySelector('.qntInput')
  let locked = false

  function set_eventListeners() {
    const qnt_btns = document.querySelectorAll('.qnt_option')
    qnt_btns.forEach(x => x.addEventListener('click', (e) => {
      hanlde_qntAttributes(e.currentTarget.dataset.value)
      recolor_default()
      qntInput.value = e.currentTarget.textContent;
      qntInput.setAttribute("value", e.currentTarget.textContent);
      handle_btnPrice(find_matchedVariant())
    }))
  }
  btn_cancelQuantity.addEventListener('click', toggle_qntInput);
  btn_giveQuantity.addEventListener('click', () => {
    setTimeout(() => {
      qntInput.focus();
      qntInput.select();
    }, 151);
    toggle_qntInput()
  });

  btn_submitQuantity.addEventListener('click', () => {
    toggle_qntInput()
    hanlde_qntAttributes(qntInput.value)
    recolor_default()
    set_eventListeners()
    handle_btnPrice(find_matchedVariant())
  });
  function checkKeyPress(event, inputElement) {
    if (event.key === "Enter" || event.keyCode === 13) {
      event.preventDefault();
      inputElement.blur();
      toggle_qntInput()
      hanlde_qntAttributes(qntInput.value)
      recolor_default()
      set_eventListeners()
      handle_btnPrice(find_matchedVariant())
    }
  }

  function toggle_qntInput() {
    const parent = document.querySelector('.input_box.qnt')
    const qnt_front = document.querySelector('.quantity_front')
    const qnt_back = document.querySelector('.quantity_back')
    parent.classList.toggle('show_input')

    if (parent.classList.contains('show_input') && ! locked) {

      locked = true
      qnt_front.style.opacity = "0%"
      qnt_back.style.display = 'flex'
      setTimeout(() => {
        qnt_back.style.opacity = "100%"
      }, 70)
      setTimeout(() => {
        qnt_front.style.display = 'none'
        locked = false
      }, 151)


    } else if (! locked) {

      locked = true
      qnt_back.style.opacity = "0%"
      qnt_front.style.display = 'flex'
      setTimeout(() => {
        qnt_front.style.opacity = "100%"
      }, 70)
      setTimeout(() => {
        qnt_back.style.display = 'none'
        locked = false
      }, 151)

    }

  }
  function hanlde_qntAttributes(value) {
    const qnt_btns = document.querySelectorAll('.qnt_option')
    qnt_btns.forEach(y => {
      y.classList.remove('active');
      y.removeAttribute('data-recolor_bg');
      y.removeAttribute('data-recolor_text_raw');
      y.removeAttribute('style');
    })

    if (value == '1' || value == '2') {
      const options_to_select = document.querySelectorAll(`.qnt_option[data-value="${value}"]`)
      options_to_select.forEach(x => {
        x.classList.add('active');
        x.setAttribute('data-recolor_bg', '');
        x.setAttribute('data-recolor_text_raw', '');
      })
    } else if (value == "3" || value == '4') {
      const targetOption_D = document.querySelector(`.qnt_option.d[data-value="${value}"]`);
      const targetOption_M = document.querySelector('.wrap_qntOptions.mobile').lastElementChild;
      [targetOption_D, targetOption_M].forEach(x => {
        x.classList.add('active');
        x.setAttribute('data-recolor_bg', '');
        x.setAttribute('data-recolor_text_raw', '');
      })
      targetOption_M.dataset.value = value;
      targetOption_M.textContent = value;

    } else {
      const targetOption_D = document.querySelector('.wrap_qntOptions.desktop').lastElementChild;
      const targetOption_M = document.querySelector('.wrap_qntOptions.mobile').lastElementChild;

      [targetOption_D, targetOption_M].forEach(x => {
        x.classList.add('active');
        x.setAttribute('data-recolor_bg', '');
        x.setAttribute('data-recolor_text_raw', '');
        x.dataset.value = value;
        x.textContent = value;
      })
    }


  }
  function handle_btnPrice(variant) {
    const actualPrice = variant.price;
    const finalPrice = formatMoney((actualPrice * Number(qntInput.value)), "{{ shop.money_format }}");
    document.querySelector('.price_insideBtn').textContent = finalPrice
  }
  function changeSVGColor(color) {
    const svgElement = document.querySelector('.theSVG');
    const paths = svgElement.querySelectorAll('path');
    paths.forEach((path) => {
      path.style.fill = color;
    });
  }
  function createSwiper() {
    swiper = new Swiper(".swiper", {
      parallax: true,
      grabCursor: true,
      noSwipingClass: 'slider-no-swiping',
      pagination: {
        el: ".swiper-pagination",
        clickable: true
      },
      navigation: {
        nextEl: ".swiper-btn-next",
        prevEl: ".swiper-btn-prev"
      }
    });
    swiper.on('transitionEnd', function() {
      reset_Transitions()
    });
    swiper.on('slideChange', function() {
      set_Colors()
    });
    set_parallax()

  }
  function replaceSwiper() {
    swiper.destroy()
    swiper = new Swiper(".swiper", {
      parallax: true,
      grabCursor: true,
      noSwipingClass: 'slider-no-swiping',
      pagination: {
        el: ".swiper-pagination",
        clickable: true
      },
      navigation: {
        nextEl: ".swiper-btn-next",
        prevEl: ".swiper-btn-prev"
      }
    });
    swiper.on('transitionEnd', function() {
      reset_Transitions()
    });
    swiper.on('slideChange', function() {
      set_Colors()
    });
    set_parallax()
  }

  function change_images() {
    const colorHex_bg = new URLSearchParams(window.location.search).get('color_bg');
    const stickyDiv = document.querySelector('.sticky_div')
    const swiper_old = stickyDiv.querySelector('.swiper')


    if (colorHex_bg) {
      const images_raw = []

// -
      {% for image in product.images %}
        let {{ 'A' | append: forloop.index }} = document.createElement('img');
        {{ 'A' | append: forloop.index }}.setAttribute('src', '{{ image | img_url: 'master' | prepend: 'https:'}}');
        {{ 'A' | append: forloop.index }}.setAttribute('alt', '{{ image.alt }}')
        images_raw.push({{ 'A' | append: forloop.index }})

// -
      {% endfor %}
      const finalImages = images_raw.filter(img => {
        return img.getAttribute('alt').includes(colorHex_bg)
      })

      const swiper_new = document.createElement('div');
      swiper_new.classList.add('swiper');
      swiper_new.setAttribute('style', "opacity: 0%");


      const swiper_wrapper = document.createElement('div');
      swiper_wrapper.classList.add('swiper-wrapper');
      swiper_wrapper.setAttribute('data-effect', "zoom");
      swiper_wrapper.setAttribute('data-zoom_active', "false");
      swiper_wrapper.setAttribute('data-reset', "");
      swiper_wrapper.setAttribute('data-magnify', "1");

      finalImages.forEach(img => {
        const swiper_slide = document.createElement('div');
        swiper_slide.classList.add('swiper-slide');
        img.classList.add('imgSwiper');
        img.setAttribute('draggable', 'false');

        swiper_slide.append(img);
        swiper_wrapper.append(swiper_slide);
      })

      const wave = document.createElement('img');
      wave.classList.add('img_WAVE_long');
      wave.setAttribute('src', "{{ 'img_WAVE_filterPage.svg' | asset_url }}");
      wave.setAttribute('style', `background-color: ${colorHex_bg}`);
      wave.setAttribute('data-swiper-parallax', "-13%");
      wave.setAttribute('data-recolor_bg', ``);


      const sliderControls = document.querySelector('.sliderControls')
      stickyDiv.removeChild(sliderControls);
      stickyDiv.append(sliderControls);

      swiper_new.append(wave);
      swiper_new.append(swiper_wrapper);
      stickyDiv.removeChild(swiper_old)
      stickyDiv.append(swiper_new)

      setTimeout(() => {
        swiper_new.removeAttribute('style')
      }, 30)



    } else {
      console.log('Load default color');
    }
  }

  function set_Colors() {
    const bullets = document.querySelectorAll('.swiper-pagination-bullet');
    const magnify = document.querySelectorAll('[data-btn_magnify]');
    [bullets, magnify].forEach(x => x.forEach(y => y.style.backgroundColor = get_colors()[0]))

    const activeBullet = document.querySelector('.swiper-pagination-bullet-active');
    const magnifyActive = document.querySelector('[data-btn_magnify].active');
    [activeBullet, magnifyActive].forEach(x => x.style.backgroundColor = get_colors()[1])
  }
  function reset_Transitions() {
    document.querySelectorAll('[data-reset]').forEach(x => {
      x.style.transitionDuration = "400ms"
    });
    document.querySelector('.img_WAVE_long').style.transition = "400ms";
  }

  window.addEventListener('resize', () => {
    set_parallax()
  })
  function set_parallax() {
    if (isDesktop()) {
      document.querySelector('.img_WAVE_long').setAttribute('data-swiper-parallax', '-20%')
    } else {
      document.querySelector('.img_WAVE_long').setAttribute('data-swiper-parallax', '-13%')
    }
  }
  function isDesktop() {
    return window.innerWidth > 991
      ? true
      : false
  }

  const btn_addToCart = document.querySelector('.btn_mainDesc.bag')
  btn_addToCart.addEventListener('click', () => {
    document.querySelector('.form_productPage').submit()
  })
</script>



{{ '_JS_productPage.js' | asset_url | script_tag }}
{{ '_JS_productZoom.js' | asset_url | script_tag }}