{% assign lang = request.locale.iso_code %}
<p class="current_lang" data-lang="{{ lang }}" style="display: none;">
  {{ lang }}
</p>

<section class="section_pageTitle">
  <div class="subWrap_pageTitle">
    <h2 class="pageTitle">{{ "filters_badminton.word_badminton" | t }}
      <span class="pageTitle_all">{{ "filters_badminton.word_initial" | t }}</span>
      <span class="pageTitle_filter" style="display: none;"></span>
    </h2>
  </div>
</section>
<section class="filterSection_FILTERS">
  <div class="filterBox_D" data-no_scrollbar>
    <div class="filter all active" data-filter="all" data-scale>
      <div class="click_overlay"></div>
      <p>{{ "filters_badminton.all" | t }}</p>
    </div>
    <!--
    <div class="filter" data-filter="sale" data-hover_grey data-scale>
      <div class="click_overlay"></div>
      <img class="icon_filter" src="{{ 'icon_filter_sale.png' | asset_url }}" alt="">
      <p>{{ "filters_badminton.sale" | t }}</p>
    </div>
    <div class="filter" data-filter="racket" data-hover_grey data-scale>
      <div class="click_overlay"></div>
      <img class="icon_filter" src="{{ 'icon_filter_racket.png' | asset_url }}" alt="">
      <p>{{ "filters_badminton.rackets" | t }}</p>
    </div>
    -->
    <div class="filter" data-filter="ball" data-hover_grey data-scale>
      <div class="click_overlay"></div>
      <img class="icon_filter" src="{{ 'icon_filter_ball.png' | asset_url }}" alt="">
      <p>{{ "filters_badminton.balls" | t }}</p>
    </div>
    <!-- 
    <div class="filter" data-filter="clothing" data-hover_grey data-scale>
      <div class="click_overlay"></div>
      <img class="icon_filter" src="{{ 'icon_filter_clothing.png' | asset_url }}" alt="">
      <p>{{ "filters_badminton.clothing" | t }}</p>
    </div>
    <div class="filter" data-filter="equipment" data-hover_grey data-scale>
      <div class="click_overlay"></div>
      <img class="icon_filter" src="{{ 'icon_filter_equipment.png' | asset_url }}" alt="">
      <p>{{ "filters_badminton.equipment" | t }}</p>
    </div> 
    --> 
  </div>
  <div class="btn_openFilters" data-toggle="filters" data-scale>
    <img class="icon_filter hide" id="icon_currentFilter" src="{{ 'icon_filter_racket.png' | asset_url }}" alt="">
    <p class="text_currentFilter">{{ "filters_badminton.all" | t }}</p>
    <img class="icon_arrowDropdown" src="{{ 'icon_arrow.svg' | asset_url }}" alt="">
  </div>
</section>
<div class="section_itemCount">
  <div class="container_itemCount">
    <p>
      {{ "filters_badminton.results" | t }}
      <span class="filter_count">{{ collections['all'].products.size }}</span>
    </p>
  </div>
</div>
<section class="section_product">
  <div class="product_grid">
    {% assign allProducts = collections['all'].products %}
    {% for product in allProducts %}
      {% if product.available %}
        <a href="{{ product.url }}" class="product" data-filter_word="{{ product.metafields.custom.filter_word}}" data-sale="{{ product.metafields.custom.sale}}">
          <div class="product_TOP">
            <img class="img_product_filterPage" src="{{ product.featured_image | img_url: '600x600' }}" alt="{{ product.featured_image.alt | escape }}">
            <img class="img_wave" src="{{ 'img_WAVE_filterPage.svg' | asset_url }}" alt="Colorful wave" data-color_bg="{{ product.metafields.custom.color_bg}}">
            <p class="textIcon_sale" data-isSale="{{ product.metafields.custom.sale}}">
              {% assign a = product.compare_at_price_max | divided_by: 1.0 %}
              {% assign b = product.price | divided_by: 1.0 %}
              {% assign discount = ((a | minus: b) | divided_by: a) | times: 100 %}-{{ discount | round: 0 }}%
            </p>

            <!-- generate color option/filter bubbles -->
            {% if product.options contains 'Color' %}
              <div class="wrap_collorBubbles">
                {% for option in product.options_with_values %}
                  {% if option.name == 'Color' %}
                    {% for value in option.values %}
                      {% assign raw_inSearch = value | split: ' ' | last %}

                      {% for variant in product.variants %}
                        {% assign var_raw = variant.option1 | split: ' ' | last %}
                        {% if var_raw == raw_inSearch and variant.available %}
                          <div class="colorBubble" style="background-color: {{ raw_inSearch }}"></div>
                          {% break %}
                        {% endif %}
                      {% endfor %}

                    {% endfor %}
                  {% endif %}
                {% endfor %}
              </div>
            {% endif %}
          </div>
          <div class="product_BOTTOM">
            <h4 class="title_product_filterPage">{{ product.metafields.custom.name_short }}</h4>
            <div class="priceWrap_filterPage">
              <p class="price_product_filterPage" data-isSale="{{ product.metafields.custom.sale}}">{{ product.price | money }}</p>
              <p class="price_product_filterPage compare">{{ product.compare_at_price | money }}</p>
            </div>
          </div>
          <div class="click_overlay"></div>
        </a>
      {% endif %}
    {% endfor %}
  </div>
</section>
<div class="filterBox_M">
  <div class="textWrap_filters_M">
    <h4>{{ "filters_badminton.word_filters" | t }}</h4>
    <div class="btn_X" data-toggle="filters">
      <div class="line_X"></div>
      <div class="line_X second"></div>
    </div>
  </div>
  <div class="filter all active" data-filter="all" data-scale>
    <div class="click_overlay"></div>
    <p>{{ "filters_badminton.all" | t }}</p>
    <p class="category_item_count" data-category_count="all">2</p>
  </div>
  <!--
  <div class="filter" data-filter="sale" data-scale>
    <div class="click_overlay"></div>
    <img class="icon_filter" src="{{ 'icon_filter_sale.png' | asset_url }}" alt="">
    <p>{{ "filters_badminton.sale" | t }}</p>
    <p class="category_item_count" data-category_count="sale">2</p>
  </div>
  <div class="filter" data-filter="racket" data-scale>
    <div class="click_overlay"></div>
    <img class="icon_filter" src="{{ 'icon_filter_racket.png' | asset_url }}" alt="">
    <p>{{ "filters_badminton.rackets" | t }}</p>
    <p class="category_item_count" data-category_count="racket">2</p>
  </div> 
  -->
  <div class="filter" data-filter="ball" data-scale>
    <div class="click_overlay"></div>
    <img class="icon_filter" src="{{ 'icon_filter_ball.png' | asset_url }}" alt="">
    <p>{{ "filters_badminton.balls" | t }}</p>
    <p class="category_item_count" data-category_count="ball">2</p>
  </div>
  <!--
  <div class="filter" data-filter="clothing" data-scale>
    <div class="click_overlay"></div>
    <img class="icon_filter" src="{{ 'icon_filter_clothing.png' | asset_url }}" alt="">
    <p>{{ "filters_badminton.clothing" | t }}</p>
    <p class="category_item_count" data-category_count="clothing">2</p>
  </div>
  <div class="filter" data-filter="equipment" data-scale>
    <div class="click_overlay"></div>
    <img class="icon_filter" src="{{ 'icon_filter_equipment.png' | asset_url }}" alt="">
    <p>{{ "filters_badminton.equipment" | t }}</p>
    <p class="category_item_count" data-category_count="equipment">2</p>
  </div>
  -->
</div>


<script>
  window.addEventListener('resize', () => {
    handle_shadow_2()
    if (/Mobi/i.test(navigator.userAgent)) {return}
    document.querySelector('.filterBox_M').classList.remove('open')
})
window.addEventListener('DOMContentLoaded', () => {
    check_for_reload()
    filter_on_load()
    randomize_products()
    count_category_items()
    handle_shadow_2()
    document.querySelector('.product_grid').style.opacity = "100%"
})
window.addEventListener('scroll', () => {
    moveWaves()
    handle_shadow_2()
})
function handle_shadow_2() {
    const nav = document.querySelector('nav')
    window.scrollY < 60 ? nav.classList.add('no_shadow') : nav.classList.remove('no_shadow')
}
function check_for_reload() {
    if (performance.navigation.type === performance.navigation.TYPE_RELOAD) {
        empty_the_url()
        window.scrollTo({top: 0, behavior: "smooth", duration: 2000})
      }
}
function filter_on_load() {
    const urlTag = new URLSearchParams(window.location.search);
    const filter = urlTag.get('filter');
    if (filter) {
        filter_items(filter)
        toggle_activeFilter(filter)
        handle_filterText(filter)
    }
}
function randomize_products() {
    const products = Array.from(document.getElementsByClassName('product'));
    products.sort(() => Math.random() - 0.5);
    products.forEach(item => document.querySelector('.product_grid').appendChild(item));
}
function count_category_items() {
    const texts = document.querySelectorAll('[data-category_count]')
    texts.forEach(x => {
        const word = x.dataset.category_count
        word == "all" ? x.textContent = document.querySelectorAll('.product').length
        : word == "sale" ? x.textContent = document.querySelectorAll('.product[data-sale="true"]').length
        : x.textContent = document.querySelectorAll(`.product[data-filter_word="${x.dataset.category_count}"`).length
    })
}
function empty_the_url() {
    if (window.location.search.includes('filter=')) {
        var urlWithoutParams = window.location.origin + window.location.pathname;
        history.replaceState({}, document.title, urlWithoutParams);
      }
}
function changeUrl_2(filterWord) {
    const url = new URLParse(window.location.href, true)
    url.query.filter = filterWord
    window.history.replaceState(null, null, url.toString())
  }

const waves = document.querySelectorAll('.img_wave')
function moveWaves() {
    waves.forEach(wave => {
        let scrollY = window.scrollY;
        if (scrollY < 5) {scrollY = 5}
        const scrollFactor = 30 / 100;
        const moveWave = -scrollY * scrollFactor;
        wave.style.transform = `translateX(${moveWave}px)`;
    })
} 

//-------------------------------

const filters_ALL = document.querySelectorAll('.filter')
const filterToggles = document.querySelectorAll('div[data-toggle="filters"]') // open btn + X

filterToggles.forEach(x => x.addEventListener('click', toggle_filterBox))
filters_ALL.forEach(x => x.addEventListener('click', (e) => {
    const filterWord = e.currentTarget.dataset.filter
    toggle_activeFilter(filterWord)
    filter_items(filterWord)
    handle_filterText(filterWord)
    changeUrl_2(filterWord)
    scroll_top()
    if(current_Display() == "mobile"){setTimeout(() => {toggle_filterBox()}, 150)}
})	
)

function filter_items(word) {
    let count = 0
    const products_All = document.querySelectorAll('.product')
    products_All.forEach(product => {
        if (word == 'all' || product.dataset.filter_word == word){product.style.display = 'flex'; count++}
        else if (word == 'sale' && product.dataset.sale == "true") {product.style.display = 'flex'; count++}
        else {product.style.display = 'none'}
    })
    document.querySelector('.filter_count').textContent = count  
    //empty_the_url()    
}
function toggle_activeFilter(filterTag) {    //separate funtion because of filtering on load with URL
    let word_activeBtn
    filters_ALL.forEach(y => { 
    if (y.dataset.filter == filterTag){y.classList.add('active'); word_activeBtn = y.lastElementChild.textContent} else {y.classList.remove('active')}   
    })      
}
function handle_filterText(filterTag) {
    const icon_current = document.getElementById('icon_currentFilter')
    const btnText = document.querySelector('.text_currentFilter')
    const pageTitle_all = document.querySelector('.pageTitle_all')
    const pageTitle_filter = document.querySelector('.pageTitle_filter')

    const targetFilter = document.querySelector(`.filter[data-filter="${filterTag}"`)

    if (filterTag == "all") {
        icon_current.classList.add('hide')
        pageTitle_all.style.display = "inline"
        pageTitle_filter.style.display = "none"

    } else {
        icon_current.classList.remove('hide') 
        icon_current.src = targetFilter.querySelector('img').src
        pageTitle_all.style.display = "none"
        pageTitle_filter.style.display = "inline"
        pageTitle_filter.textContent = targetFilter.querySelector('p').textContent
    }
    btnText.textContent = targetFilter.querySelector('p').textContent
}
function toggle_filterBox() {
    const fiterBox = document.querySelector('.filterBox_M')
    if (!fiterBox.classList.contains('open')) {
        fiterBox.style.display = 'flex'
        setTimeout(() => {fiterBox.classList.add('open')}, 10)}
    else {
        fiterBox.classList.remove('open')
        setTimeout(() => {fiterBox.style.display = 'none'}, 151);
    }
}
function scroll_top() {
    if (isDesktop() || current_Display() == "tablet") {window.scrollTo({top: 120, behavior: "smooth", duration: 2000})}
    else {setTimeout(() => {window.scrollTo({top: 0, behavior: "smooth", duration: 2000})}, 150)}
}

function isDesktop() {return window.innerWidth > 991 ? true : false}
function current_Display() {
    return window.innerWidth > 1439 ? 'desktop_big' :
            window.innerWidth > 991 ? 'desktop' :
            window.innerWidth > 767 ? 'tablet' :
            'mobile';
}

// Check if the user is navigating back
function checkBackNavigation() {
    if (performance && performance.navigation) {
      if (performance.navigation.type === 2) {
        // The user is navigating back to a previous page
        console.log("User clicked back button.");
      }
    }
  }
  
// Add an event listener to the window object
window.addEventListener("popstate", checkBackNavigation);





</script>

