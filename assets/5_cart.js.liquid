

window.addEventListener('DOMContentLoaded', () => {
    handle_shadow();
    edit_shippingLine();
    recolor_qntInputs()

})
window.addEventListener('scroll', () => {handle_shadow()})
window.addEventListener('resize', () => {handle_shadow(); edit_shippingLine()})
function handle_shadow() {
    const nav = document.querySelector('nav')
    if (isDesktop() && window.scrollY < 60) {
        nav.classList.add('no_shadow')
    } else if (isDesktop() && window.scrollY > 60) {
        nav.classList.remove('no_shadow')
    } else if (!isDesktop()) {
        nav.classList.remove('no_shadow')
    }
}

const btn_checkout= document.querySelector('.btn.btn_checkout')
const btn_invisibleCheckout = document.querySelector('button[name="checkout"]')
const links_to_item = document.querySelectorAll('.link_overlay')
const empt_cart_slots = document.querySelectorAll('.empty_cart_slot')

const btns_add_minus = document.querySelectorAll('.btn_qnt')
const btns_showAction = document.querySelectorAll('.btn_showAction')

const btn_submitDecoy = document.querySelectorAll('.btn_qntDecoy.submit')
const btn_closeDecoy= document.querySelectorAll('.btn_qntDecoy.cancel')
const decoyInputs_all = document.querySelectorAll('input[name="cart_decoy"]')

const qntOptions = document.querySelectorAll('.qntOption')

btn_checkout.addEventListener('click', () => {btn_invisibleCheckout.click()})
empt_cart_slots.forEach(x => {
    x.addEventListener('mouseover', (e) => {
        e.currentTarget.classList.add('change')
    })
    x.addEventListener('mouseleave', (e) => {
        e.currentTarget.classList.remove('change')
    })
    x.addEventListener('touchstart', (e) => {
        if(isDesktop()) {return}
        e.currentTarget.classList.add('change')
    })
    x.addEventListener('touchend', (e) => {
        if(isDesktop()) {return}
        e.currentTarget.classList.remove('change')
    })
})
btns_add_minus.forEach(x => x.addEventListener('click', (e) => {
    const target = e.currentTarget
    const value = (target.dataset.update == 'plus' ? true : false)
    const input = target.parentElement.querySelector('input[type="number"]')

    // const info = get_itemInfo(e.currentTarget.dataset.variant_id)
    // const request = parseInt(e.currentTarget.dataset.value)
    // const qnt_left = info.qnt_left

    handle_qntInput(input, value)
}));
links_to_item.forEach(x => x.addEventListener('click', (e) => {
    y = e.currentTarget
    open_page_item(y.dataset.variant_id, y.dataset.bg, y.dataset.raw, y.dataset.link)
}))
btn_submitDecoy.forEach(x => x.addEventListener('click', (e) => {
    
    const info = get_itemInfo(e.currentTarget.dataset.variant_id)
  


}))

decoyInputs_all.forEach(x => x.addEventListener('input', (e) => {
    const info = get_itemInfo(e.currentTarget.dataset.variant_id)
    const request = parseInt(e.currentTarget.value)
    const qnt_left = info.qnt_left

    if (!request || request < 1) {
        display([{target: info.target_btn, value: false}])
        console.log('return')

    } else if (request > qnt_left) {
        display([
            {target: info.target_btn, value: false},
            {target: info.target_error, value: true}
        ])
    } else {
        display([
            {target: info.target_btn, value: true},
            {target: info.target_error, value: false}
        ])
    }

}))

btns_showAction.forEach(x => x.addEventListener('click', (e) => {
    const id = e.currentTarget.dataset.variant_id
    toggle_actionBox(id, true)
}))
btn_closeDecoy.forEach(x => x.addEventListener('click', (e) => {
    const id = e.currentTarget.dataset.variant_id
    toggle_actionBox(id, false)

}))

qntOptions.forEach(x => x.addEventListener('click', (e) => {

    const info = get_itemInfo(e.currentTarget.dataset.variant_id)
    const request = parseInt(e.currentTarget.dataset.value)
    const qnt_left = info.qnt_left

    if (request > qnt_left) {
        display([{target: info.target_error, value: true}])
        console.log('nope')
    } else {
        display([{target: info.target_error, value: false}])
        replace_activeOption(e.currentTarget)
        console.log('yessir')
    }
    


}))

function handle_qntInput(target, value) {
    const info = get_itemInfo(e.currentTarget.dataset.variant_id)
    const request = parseInt(e.currentTarget.dataset.value)
    const qnt_left = info.qnt_left

    if (value) {
        target.value++
    } else {
        if (target.value == 1) {
            target.parentElement.nextElementSibling.click()
        } 
        target.value--
    }
    // document.querySelector('button[name="update"]').click()
}
function edit_shippingLine() {
    if (!is_cart_empty_2()) {
    const lines_shipping_ALL = document.querySelectorAll('.line_shipping.grow')
    const line_box = document.querySelector('.lineWrap_freeShipping')
    const money_threshold = 70
    const money_current = parseInt(document.querySelector('[data-price_current]').dataset.price_current)
    const money_diffrence = money_threshold - money_current
    if (money_diffrence <= 0) {
        lines_shipping_ALL.forEach(x => x.style.width = '100%')
        line_box.style.display = 'none'
    } else {
        line_box.style.display = 'flex'
        lines_shipping_ALL.forEach(x => {
            const length_default = line_box.getBoundingClientRect().width
            const percentageLeft = (money_diffrence / money_threshold) * 100;
            const newWidth = length_default * (1 - (percentageLeft / 100));
            x.style.width = `${newWidth}px`;
        })
        
    }

    }
}
function open_page_item(id, color_bg, color_raw, shopLink) {
    const url = new URLParse(shopLink, true)
    url.query.variant = id
    url.query.color_bg = color_bg
    url.query.color_raw = color_raw
    window.history.replaceState(null, null, url.toString())
    window.location.href = url.toString();
}


function handle_qntInput_cart(allow, request, qnt_left, id) {
    if (allow) {
        target_btn.classList.remove('hide')
    } else {
        target_btn.classList.add('hide')
    }
}
function toggle_actionBox(id, condition){

    const parent = document.querySelector(`.actionBox_cartItem[data-variant_id="${id}"]`)
    const box_front = document.querySelector(`.actionBox_FRONT[data-variant_id="${id}"]`)
    const box_back = document.querySelector(`.actionBox_BACK[data-variant_id="${id}"]`)
    const get_childrenHeight = parentElement =>[...parentElement.children].reduce((sum, child) => sum + child.getBoundingClientRect().height,0);
    let locked = false



    if (condition && ! locked) {
        locked = true
        box_front.style.opacity = "0%"
        box_back.style.display = 'block'

        setTimeout(() => {box_back.style.opacity = "100%"}, 70)
        setTimeout(() => {
            box_front.style.display = 'none';
            locked = false
        }, 151)
  
        parent.style.height = get_childrenHeight(box_back) + 'px'

    } else if (! locked) {

        locked = true
        box_back.style.opacity = "0%"
        box_front.style.display = 'flex'

        setTimeout(() => {box_front.style.opacity = "100%"}, 70)
        setTimeout(() => {locked = false; box_back.style.display = 'none'}, 151)

        parent.style.height = '70px'
    }
}

function get_itemInfo(id){ // leave the structure
    const decoy_input = document.querySelector(`input[name="cart_decoy"][data-variant_id="${id}"]`)
    const qnt_left = parseInt(decoy_input.dataset.qnt_left)
    const target_btn = document.querySelector(`.btn_qntDecoy.submit[data-variant_id="${id}"]`)
    const target_error = document.querySelector(`.text_inputError[data-variant_id="${id}"]`)


    return {
        qnt_left, target_btn, target_error
    }
}
function allow_submit(id, value){
    return 
}


function display(list){
    list.forEach(x => {
        if (x.value) {
            x.target.classList.remove('hide') 
        } else {
            x.target.classList.add('hide') 
        }
    })
}
function recolor_qntInputs() {
    const active_qntButtons = document.querySelectorAll('.qntOption.active')
    console.log()
    active_qntButtons.forEach(x => {
        const bg = x.dataset.bg
        const raw = x.dataset.raw
        x.style.backgroundColor = bg
        x.style.color = raw
    })


}
function replace_activeOption(newOption) {
    const old_activeOption = document.querySelector(`.qntOption.active[data-variant_id="${newOption.dataset.variant_id}"]`)
    old_activeOption.removeAttribute('style')
    old_activeOption.classList.remove('active')
    
    newOption.classList.add('active')
    newOption.style.backgroundColor = newOption.dataset.bg
    newOption.style.color = newOption.dataset.raw
}

function isDesktop() {return window.innerWidth > 991 ? true : false};

