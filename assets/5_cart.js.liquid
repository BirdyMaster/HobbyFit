const buy_fixed = document.querySelector('.fixed_buyBox')
const nav = document.querySelector('nav') 
const container = document.querySelector('.container.container_cartItems') 

window.addEventListener('DOMContentLoaded', () => {
    handle_shadow();
    recolor_qntInputs()
    if (!isDesktop()) {
        nav.style.position = 'relative'
        container.style.paddingTop = "4vw"
    } else {
        nav.style.position = 'fixed'
        container.style.paddingTop = "0"
    }


})
window.addEventListener('scroll', () => {
    handle_shadow()
    const y = window.scrollY
    y > 220 ? buy_fixed.classList.add('show') : buy_fixed.classList.remove('show')
})
window.addEventListener('resize', () => {
    handle_shadow();
    !isDesktop() ? nav.style.position = 'relative' : nav.style.position = 'fixed'

})
function handle_shadow() {
    const nav = document.querySelector('nav')
    if (isDesktop() && window.scrollY < 60) {
        nav.classList.add('no_shadow')
    } else if (isDesktop() && window.scrollY > 60) {
        nav.classList.remove('no_shadow')
    } else if (!isDesktop()) {
        nav.classList.remove('no_shadow')
    }
}



const btns_checkout_BOTH = document.querySelectorAll('.btn.cart.buy')
const btn_invisibleCheckout = document.querySelector('button[name="checkout"]')
const links_to_item = document.querySelectorAll('.link_overlay')
const empty_cart_slots = document.querySelectorAll('.empty_cart_slot')
const empty_preview_slots = document.querySelectorAll('.itemPreview.empty')

const btns_showAction = document.querySelectorAll('.btn_showAction')

const btn_submitDecoy = document.querySelectorAll('.btn_qntDecoy.submit')
const btn_hideAction= document.querySelectorAll('.btn_qntDecoy.cancel')
const decoyInputs_all = document.querySelectorAll('input[name="cart_decoy"]')

const qntOptions = document.querySelectorAll('.qntOption')
const itemPreviews = document.querySelectorAll('.itemPreview')
const btn_UPDATE = document.querySelector('button[name="update"]')


btns_showAction.forEach(x => x.addEventListener('click', (e) => {
    const id = e.currentTarget.dataset.variant_id
    toggle_actionBox(id, true)
}))
btn_hideAction.forEach(x => x.addEventListener('click', (e) => {
    const id = parseInt(e.currentTarget.dataset.variant_id)
    const info = get_itemInfo(id)
    toggle_actionBox(id, false)
    display([{target: info.target_error, value: false}])

}))
btn_submitDecoy.forEach(x => x.addEventListener('click', (e) => {
    const info = get_itemInfo(parseInt(e.currentTarget.dataset.variant_id))
    const btn_id = e.currentTarget.dataset.variant_id

    const request = parseInt(document.querySelector(`input[name="cart_decoy"][data-variant_id="${e.currentTarget.dataset.variant_id}"]`).value)
    const qnt_left = info.qnt_left

    if (request > qnt_left) {
        display([{target: info.target_error, value: true}])

    } else {
        display([{target: info.target_error, value: false}])
        replace_activeOption(btn_id, request, qnt_left)
        toggle_actionBox(btn_id, false)
        submit_qnt(btn_id, request)
    }
}))
qntOptions.forEach(x => x.addEventListener('click', (e) => {

    const info = get_itemInfo(parseInt(e.currentTarget.dataset.variant_id))
    const btn_id = e.currentTarget.dataset.variant_id

    const request = parseInt(e.currentTarget.dataset.value)
    const qnt_left = info.qnt_left

    if (request > qnt_left) {
        display([{target: info.target_error, value: true}])

    } else {
        toggle_actionBox(btn_id, false)
        display([{target: info.target_error, value: false}])
        submit_qnt(btn_id, request)
        replace_activeOption(btn_id, request, qnt_left)
        
        
    }
}))
itemPreviews.forEach(x => x.addEventListener('click', (e) => {
    const scroll_target = document.querySelector(`.cart_item[data-variant_id="${e.currentTarget.dataset.variant_id}"]`);
    if (scroll_target) {
        const targetOffsetTop = scroll_target.getBoundingClientRect().top;
        const scrollDistance = targetOffsetTop + window.scrollY - 180;
        const scrollSpeed = 1000; // Adjust the scroll speed as desired (in pixels per second)
        scrollToY(scrollDistance, scrollSpeed);
    }
}));
decoyInputs_all.forEach(x => x.addEventListener('input', (e) => {
    const input_id = parseInt(e.currentTarget.dataset.variant_id)
    const info = get_itemInfo(input_id)
    
    const request = parseInt(e.currentTarget.value)
    const qnt_left = info.qnt_left
    const input_decoy = document.querySelector(`input[name="cart_decoy"][data-variant_id="${input_id}"]`)

    if (!request || request < 1) {
        display([{target: info.target_btn, value: false}])
        input_decoy.focus()
        input_decoy.select()

    } else if (request > qnt_left) {
        display([
            {target: info.target_btn, value: false},
            {target: info.target_error, value: true}
        ])
        input_decoy.focus()
        input_decoy.select()

    } else {
        display([
            {target: info.target_btn, value: true},
            {target: info.target_error, value: false}
        ])
    }

}))


// simple
links_to_item.forEach(x => x.addEventListener('click', (e) => {
    y = e.currentTarget
    open_page_item(y.dataset.variant_id, y.dataset.bg, y.dataset.raw, y.dataset.link)
}))
btns_checkout_BOTH.forEach(x => x.addEventListener('click', () => {btn_invisibleCheckout.click()}))
empty_cart_slots.forEach(x => {
    x.addEventListener('mouseover', (e) => {
        e.currentTarget.classList.add('change')
    })
    x.addEventListener('mouseleave', (e) => {
        e.currentTarget.classList.remove('change')
    })
    x.addEventListener('touchstart', (e) => {
        if(isDesktop()) {return}
        e.currentTarget.classList.add('change')
    })
    x.addEventListener('touchend', (e) => {
        if(isDesktop()) {return}
        e.currentTarget.classList.remove('change')
    })
})
empty_preview_slots.forEach(x => {
    x.addEventListener('mouseover', (e) => {
        e.currentTarget.classList.add('change')
    })
    x.addEventListener('mouseleave', (e) => {
        e.currentTarget.classList.remove('change')
    })
    x.addEventListener('touchstart', (e) => {
        if(isDesktop()) {return}
        e.currentTarget.classList.add('change')
    })
    x.addEventListener('touchend', (e) => {
        if(isDesktop()) {return}
        e.currentTarget.classList.remove('change')
    })
})
//------- 

function get_itemInfo(id){ 

    const qnt_left = parseInt(document.querySelector(`.cart_item[data-variant_id="${id}"]`).dataset.qnt_left)
    const target_btn = document.querySelector(`.btn_qntDecoy.submit[data-variant_id="${id}"]`)
    const target_error = document.querySelector(`.text_inputError[data-variant_id="${id}"]`)

    return {
        qnt_left, target_btn, target_error
    }
}
function toggle_actionBox(id, condition){ //true => showBack
    const parent = document.querySelector(`.actionBox_cartItem[data-variant_id="${id}"]`)
    const box_front = document.querySelector(`.actionBox_FRONT[data-variant_id="${id}"]`)
    const box_back = document.querySelector(`.actionBox_BACK[data-variant_id="${id}"]`)
    const input_decoy = document.querySelector(`input[name="cart_decoy"][data-variant_id="${id}"]`)

    const get_childrenHeight = parentElement =>[...parentElement.children].reduce((sum, child) => sum + child.getBoundingClientRect().height,0);
    let locked = false

    if (condition && ! locked) { // show back
        locked = true
        box_front.style.opacity = "0%"
        box_back.style.display = 'block'

        setTimeout(() => {box_back.style.opacity = "100%"}, 70)
        setTimeout(() => {
            box_front.style.display = 'none';
            locked = false
        }, 151)
  
        parent.style.height = get_childrenHeight(box_back) + 'px'
        setTimeout(() => {
            input_decoy.focus()
            input_decoy.select()
        }, 30)

    } else if (! locked) {

        locked = true
        box_back.style.opacity = "0%"
        box_front.style.display = 'flex'

        setTimeout(() => {box_front.style.opacity = "100%"}, 70)
        setTimeout(() => {locked = false; box_back.style.display = 'none'; input_decoy.value = ''}, 151)

        parent.style.height = '60px'
    }
}
function submit_qnt(id, qnt) {
    const real_input = document.querySelector(`input[name="updates[]"][data-variant_id="${id}"]`)
    const qnt_texts = document.querySelectorAll(`[data-variant_id="${id}"][data-qnt_current]`)

    const qnt_text_miniFeature = document.querySelector(`.miniFeature[data-variant_id="${id}"]`)
    const text_sumPrice = document.querySelector(`.text_sumPrice[data-variant_id="${id}"]`)
    
    real_input.value = qnt
    qnt_texts.forEach(x => x.textContent = qnt)
    qnt_text_miniFeature.textContent = qnt
    text_sumPrice.textContent = formatMoney(text_sumPrice.dataset.price_for_one * qnt, format)

    bubble_jump(qnt_text_miniFeature)

    btn_UPDATE.dataset.update_element_id = id
    btn_UPDATE.dataset.update_element_qnt = qnt
    btn_UPDATE.click()


}
function checkKeyPress_cart(event, input_decoy) {

    if (event.key === "Enter" || event.keyCode === 13) {
        event.preventDefault()

        const info = get_itemInfo(parseInt(input_decoy.dataset.variant_id))
        const id = input_decoy.dataset.variant_id
    
        const request = parseInt(input_decoy.value)
        const qnt_left = info.qnt_left
        
        if (!request || request < 1) {
            input_decoy.focus()
            input_decoy.select()

        } else if (request > qnt_left) {
            display([{target: info.target_error, value: true}])
    
        } else {
            input_decoy.blur()
            display([{target: info.target_error, value: false}])
            replace_activeOption(id, request, qnt_left)
            toggle_actionBox(id, false)
            submit_qnt(id, request)
        }

    }
}

// simple
function display(list){
    list.forEach(x => {
        if (x.value) {
            x.target.classList.remove('hide') 
        } else {
            x.target.classList.add('hide') 
        }
    })
}
function recolor_qntInputs() {
    const active_qntButtons = document.querySelectorAll('.qntOption.active')
    active_qntButtons.forEach(x => {
        const bg = x.dataset.bg
        const raw = x.dataset.raw
        x.style.backgroundColor = bg
        x.style.color = raw
    })


}
function replace_activeOption(id, qnt_request, qnt_left) {

    const last_m = document.querySelector(`.qntOption.m.last[data-variant_id="${id}"]`)
    const last_d = document.querySelector(`.qntOption.d.last[data-variant_id="${id}"]`)
    const options_old = document.querySelectorAll(`.qntOption.active[data-variant_id="${id}"]`)
    options_old.forEach(x => x.removeAttribute('style'))
    options_old.forEach(x => x.classList.remove('active'))

    if (qnt_request > 10 && qnt_request <= 12) {
        const new_d = document.querySelector(`.qntOption.d[data-value="${qnt_request}"][data-variant_id="${id}"]`)
        activate_activeOptions([last_m, new_d], qnt_request)
        
        if (qnt_left > 12) {reset_lastOptions([{target: last_d, qnt: 12}])}
        

    } else if (qnt_request > 12) {
        activate_activeOptions([last_d, last_m], qnt_request)
    } else {
        const options_new = document.querySelectorAll(`.qntOption[data-value="${qnt_request}"][data-variant_id="${id}"]`)
        options_new.forEach(option => {
            option.classList.add('active')
            option.style.backgroundColor = option.dataset.bg
            option.style.color = option.dataset.raw
        })
        if (qnt_left > 12) {reset_lastOptions([{target: last_d, qnt: 12}])}
        if (qnt_left > 10) {reset_lastOptions([{target: last_m, qnt: 10}])}
    } 
}
function activate_activeOptions(option_list, value){
    
    option_list.forEach(option => {
        option.classList.add('active')
        option.style.backgroundColor = option.dataset.bg
        option.style.color = option.dataset.raw
        option.textContent = value
        option.dataset.value = value
    })
}
function reset_lastOptions(option_list){

    option_list.forEach(option => {
        const target = option.target
        const qnt = option.qnt
        target.dataset.value = qnt
        target.textContent = qnt
    })
}
function open_page_item(id, color_bg, color_raw, shopLink) {
    const url = new URLParse(shopLink, true)
    url.query.variant = id
    url.query.color_bg = color_bg
    url.query.color_raw = color_raw
    window.history.replaceState(null, null, url.toString())
    window.location.href = url.toString();
}
function scrollToY(scrollTargetY, speed) {
    const scrollY = window.scrollY || window.pageYOffset;
    let currentTime = 0;

    const easingEquation = (t) => {
        // Custom easing equation (ease-in-out in this case)
        return 0.5 - 0.5 * Math.cos(Math.PI * t);
    };

    const time = Math.max(0.1, Math.min(Math.abs(scrollY - scrollTargetY) / speed, 0.8));

    function tick() {
        currentTime += 1 / 60;

        const position = currentTime / time;
        const easing = easingEquation(position);

        if (position < 1) {
            window.requestAnimationFrame(tick);
            window.scrollTo(0, scrollY + (scrollTargetY - scrollY) * easing);
        } else {
            window.scrollTo(0, scrollTargetY);
        }
    }

    tick();
}
function isDesktop() {return window.innerWidth > 991 ? true : false};
// ----------

