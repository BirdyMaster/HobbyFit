

if (product_available) {
  const formBtn_buy = document.querySelector('.formBtn.buy')
  const formBtn_addCarts = document.querySelectorAll('.formBtn.addCart')
  const formBtn_changeQnt = document.querySelector('.formBtn.changeQnt')
  const formBtn_viewCart = document.querySelector('.formBtn.viewCart')

  formBtn_addCarts.forEach(x => x.addEventListener('click', () => {
    document.querySelector('.form_productPage').submit()
  }))
  formBtn_changeQnt.addEventListener('click', () => {
    document.querySelector('.btn_giveQuantity').click()
  })
  formBtn_buy.addEventListener('click', () => {
    const form = document.querySelector('.form_productPage');
    const input = document.createElement('input');
    input.value = "/checkout";
    input.type = "hidden";
    input.name = "return_to";

    form.appendChild(input);
    form.submit();
  })
  handle_qnt_options(qnt_police(find_matchedVariant()).qnt_avail)
}

function qnt_police(variant) {

  const x = variant_inBag(variant.id)
  const is_in_cart = x.inCart
  const qnt_cart = x.qnt
  const qnt_left = get_qnt(variant.id)
  const qnt_request = parseInt(document.querySelector('.qntInput').value)

  

  let allow_add = false
  let error = 'none'

  if ((is_in_cart && (qnt_cart + qnt_request) > qnt_left)) {
    allow_add = false
    error = 'cart'
    item = x.inCart

  } else if (is_in_cart && qnt_request > qnt_left) {
    allow_add = false
    error = 'qnt'
    item = x.inCart
  }
  else if (!is_in_cart && qnt_request > qnt_left) {
    allow_add = false
    error = 'qnt'
  } else {
    allow_add = true
  }
  
  let obj = {
    allow_add,
    error,
    qnt_request: qnt_request,
    qnt_cart: x.qnt,
    qnt_left: qnt_left,
    qnt_avail: qnt_left - x.qnt,
    is_Cart: !!is_in_cart, 
    }

    return obj
}

function edit_form_alerts(isCart, error) {

  const textAlerts = document.querySelectorAll('.textAlert')
  const textAlert_qntError = document.querySelector('.textAlert.qnt_error')
  const textAlert_cartError = document.querySelector('.textAlert.cart_error')
  const textAlert_isCart = document.querySelector('.textAlert.isCart')
  textAlerts.forEach(x => x.style.display = "none")

  if (isCart && error == 'none') {
    textAlert_isCart.style.display = "block"

  } else if (error == 'qnt') {
    textAlert_qntError.style.display = "block"
    
  } else if (error == 'cart') {
    textAlert_cartError.style.display = "block"
  }


}
function handle_from_btns(condition, error) {
  const formBtns = document.querySelectorAll('.formBtn')

  const formBtn_buy = document.querySelector('.formBtn.buy')
  const formBtn_addCart_second = document.querySelector('.formBtn.addCart.second')
  const formBtn_addCart_main = document.querySelector('.formBtn.addCart.main')
  const formBtn_changeQnt = document.querySelector('.formBtn.changeQnt')
  const formBtn_viewCart = document.querySelector('.formBtn.viewCart')

  formBtns.forEach(x => x.style.display = "none")
  
  if (!condition && error == "none") {
    formBtn_buy.style.display = "flex"
    formBtn_addCart_second.style.display = "flex"

  } else if (condition && error == "none") {
    formBtn_addCart_main.style.display = "flex"
    formBtn_viewCart.style.display = "flex"

  } else if (!condition&& error == "qnt") {
    formBtn_buy.style.display = "flex"
    formBtn_addCart_second.style.display = "flex"
    formBtn_changeQnt.style.display = "flex"

  } else if (condition && error == "cart") {
    formBtn_addCart_main.style.display = "flex"
    formBtn_changeQnt.style.display = "flex"
    formBtn_viewCart.style.display = "flex"
  }
}
function handle_qnt_options(qnt_available) {
  const qnt_btns = document.querySelectorAll('.qntOption')
  const btn_giveQuantity_d = document.querySelector('.btn_giveQuantity.d')
  const btn_giveQuantity_m = document.querySelector('.btn_giveQuantity.m')

  qnt_btns.forEach(btn => {
    if (btn.dataset.value > qnt_available) {
        btn.classList.add('disabled')
    } else {
        btn.classList.remove('disabled')
    }
  })
  
  
  qnt_available >= 4 ? btn_giveQuantity_m.classList.remove('disabled') : btn_giveQuantity_m.classList.add('disabled')
  qnt_available >= 6 ? btn_giveQuantity_d.classList.remove('disabled') : btn_giveQuantity_d.classList.add('disabled') 
}
function edit_text_qnts(qnt_left, qnt_cart, qnt_request) {
  document.querySelectorAll('.text_qnt.left').forEach(x => x.textContent = qnt_left)
  document.querySelectorAll('.text_qnt.inCart').forEach(x => x.textContent = qnt_cart)
  document.querySelectorAll('[data-chosen_qnt]').forEach(x => x.textContent = qnt_request)
  document.querySelectorAll('[data-variant_qnt]').forEach(x => x.textContent = qnt_left);

  const price_inside_btn = document.querySelector('[data-price_calc]')
  price_inside_btn.textContent = formatMoney(find_matchedVariant().price * qnt_request, format)
  bubble_jump(price_inside_btn)

  const p_stockLeft = document.querySelector('.p_stockLeft')
    if (qnt_left <= 2) {
      p_stockLeft.classList.add('red')
    } else {
      p_stockLeft.classList.remove('red')
    }
}
function fix_qnt_choice(qnt_avail, isCart, error) {
  // on color/size swap, this will briefly return 0
  const qnt_selected = document.querySelector('.qntInput').value
  const texts_chosen_qnt = document.querySelectorAll('[data-chosen_qnt]')
  const price_inside_btn = document.querySelector('[data-price_calc]')
  
  if (qnt_selected > qnt_avail && qnt_avail) {
    hanlde_qntAttributes(parseInt(qnt_avail))
    edit_qntInput(qnt_avail)
    texts_chosen_qnt.forEach(x => x.textContent = qnt_avail)
    price_inside_btn.textContent = formatMoney(find_matchedVariant().price * qnt_avail, format)
    edit_form_alerts(isCart, error)
    handle_from_btns(isCart, error)
  }
}

function edit_hiddenInput(matchedVariant) {
  document.getElementById('product_id').value = matchedVariant.id
}
function set_circleColors() {
    const circle_option = document.querySelectorAll('.circle_option')
    circle_option.forEach(x => {
      const color_raw = x.dataset.circle_color.split(" ")[2];
      x.style.backgroundColor = color_raw;
    })
}
function changeUrl(matchedVariant, color_bg, color_raw) {
  const url = new URLParse(window.location.href, true)
  url.query.variant = matchedVariant.id
  url.query.color_bg = color_bg
  url.query.color_raw = color_raw
  window.history.replaceState(null, null, url.toString())
}
function bubble_jump(target) {
  target.classList.add('scale')
  setTimeout(() => {
    target.classList.remove('scale')
  }, 300)
}