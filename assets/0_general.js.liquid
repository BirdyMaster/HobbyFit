






window.addEventListener('DOMContentLoaded', () => {
    const items_color_bg = document.querySelectorAll('[data-color_bg]')
    const items_sale = document.querySelectorAll('[data-isSale="true"]')
    const btn_cart = document.querySelector('[data-cart_count]')
    const waves = document.querySelectorAll('.img_wave')

    items_color_bg.forEach(x => x.style.backgroundColor = x.dataset.color_bg)
    items_sale.forEach(x => x.classList.add('sale'))
    btn_cart.dataset.cart_count > 0 ? btn_cart.classList.add('not_empty') : btn_cart.classList.remove('not_empty')
    setTimeout(() => {waves.forEach(x => x.style.opacity = '100%')}, 100)
    set_langLinks()
})



const lang = document.querySelector('.current_lang[data-lang]').dataset.lang
const url_Badminton = `${window.location.origin}/${lang}/collections/badmintono-prekes`;
const links = document.querySelectorAll('[data-link_filterpage]')
const scale_btns = document.querySelectorAll('[data-scale]');
const formatMoney = function(cents, format) {
  if (typeof cents == 'string') { cents = cents.replace('.',''); }
  var value = '';
  var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
  var formatString = (format || this.money_format);
  function defaultOption(opt, def) {
     return (typeof opt == 'undefined' ? def : opt);
  }
  function formatWithDelimiters(number, precision, thousands, decimal) {
    precision = defaultOption(precision, 2);
    thousands = defaultOption(thousands, ',');
    decimal   = defaultOption(decimal, '.');

    if (isNaN(number) || number == null) { return 0; }

    number = (number/100.0).toFixed(precision);

    var parts   = number.split('.'),
        dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
        cents   = parts[1] ? (decimal + parts[1]) : '';

    return dollars + cents;
  }
  switch(formatString.match(placeholderRegex)[1]) {
    case 'amount':
      value = formatWithDelimiters(cents, 2);
      break;
    case 'amount_no_decimals':
      value = formatWithDelimiters(cents, 0);
      break;
    case 'amount_with_comma_separator':
      value = formatWithDelimiters(cents, 2, '.', ',');
      break;
    case 'amount_no_decimals_with_comma_separator':
      value = formatWithDelimiters(cents, 0, '.', ',');
      break;
  }
  return formatString.replace(placeholderRegex, value);
};
const animateCSS = (element, animation, prefix = 'animate__') =>
  // We create a Promise and return it
  new Promise((resolve, reject) => {
    const animationName = `${prefix}${animation}`;
    const node = document.querySelector(element);

    node.classList.add(`${prefix}animated`, animationName);

    // When the animation ends, we clean the classes and resolve the Promise
    function handleAnimationEnd(event) {
      event.stopPropagation();
      node.classList.remove(`${prefix}animated`, animationName);
      resolve('Animation ended');
    }

    node.addEventListener('animationend', handleAnimationEnd, {once: true});
});

links.forEach(x => x.addEventListener('click', e => {
  set_URL(e.currentTarget.dataset.link_filterpage);
}));
scale_btns.forEach(function(el) {
  el.addEventListener('mousedown', function() {
    el.style.transform = 'scale(0.85)';
  });
  el.addEventListener('mouseup', function() {
    el.style.transform = 'scale(1)';
  });
  el.addEventListener('mouseleave', function() {
    el.style.transform = 'scale(1)';
  });
  el.addEventListener('touchstart', function() {
    el.style.transform = 'scale(0.95)';
  });
  el.addEventListener('touchend', function() {
    el.style.transform = 'scale(1)';
  });
});


function set_URL(word) {
  const urlTag = new URLSearchParams();
  
  urlTag.set('filter', encodeURIComponent(word));
  window.location.href = url_Badminton + "?" + urlTag.toString();
  
}
function isDesktop() {
  return window.innerWidth > 991 ? true : false;
}
function red_highlight(el) {
  el.classList.add('red_highlight')
  setTimeout(() => {el.classList.remove('red_highlight')}, 1000)
}
function bubble_jump(target) {
  target.classList.add('scale')
  setTimeout(() => {
    target.classList.remove('scale')
  }, 300)
}

function set_langLinks(){
  const langBtns = document.querySelectorAll('.langLink')
  langBtns.forEach(x => x.addEventListener('click', (e) => {

    const url = window.location.href
    const lang_current = get_lang(url)
    const lang_target = e.currentTarget.dataset.lang
    console.log(lang_current)
    window.location.href = create_langUrl(lang_current, lang_target, url)

  }))


}
function get_lang(url) {
  if (url.includes('.com/de')) {return "de"}
  else if (window.location.href.includes('.com/lt')) {return "lt"}
  else {return ""}
}
function create_langUrl(lang_current, lang_target, url){
  if (lang_current == '' && lang_target == '') { //if EN
    return url

  } else if (lang_current == '') {
    return url.replace('.com', `.com/${lang_target}`)

  } else if ((lang_current == 'de' || lang_current == 'lt') && lang_target == '') {
    if (lang_current == 'de') {return url.replace('.com/de', `.com`)}
    else if (lang_current == 'lt') {return url.replace('.com/lt', `.com`)}
    
  } else if (lang_current == 'de') {
    return url.replace('.com/de/', `.com/${lang_target}/`)

  } else if (lang_current == 'lt') {
    return url.replace('.com/lt/', `.com/${lang_target}/`)
  }
}